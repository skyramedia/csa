---
import { Image } from 'astro:assets'

const pr = new Intl.PluralRules('en-US', { type: 'ordinal' })
const suffixes = new Map([
	['one', 'st'],
	['two', 'nd'],
	['few', 'rd'],
	['other', 'th'],
])
function formatOrdinals(n: number) {
	const rule = pr.select(n)
	const suffix = suffixes.get(rule)
	return `${n}${suffix}`
}

const images = await Astro.glob<{default: ImageMetadata}>('~/assets/images/carousel/*.jpg')
---

<astro-carousel class="max-w-7xl mx-auto">
	<div class="relative">
		<div
			class="overflow-hidden relative rounded-lg h-64 sm:h-80 md:h-96 xl:h-96 2xl:h-[36rem]"
		>
			<!-- Item 1 -->
			{
				Object.values(images).map(async (img, i) => {
					return (
						<div class="hidden duration-700 ease-in-out fade-in" data-carousel-item>
							<span class="absolute top-1/2 left-1/2 text-2xl font-semibold text-white -translate-x-1/2 -translate-y-1/2 sm:text-3xl dark:text-gray-800">
								{formatOrdinals(i+1)}{' '}
								slide
							</span>
							<Image
								src={img.default}
                format="webp"
								class="block absolute top-1/2 left-1/2 w-full -translate-x-1/2 -translate-y-1/2"
								alt="..."
							/>
						</div>
					)
				})
			}
		</div>
		<!-- Slider indicators -->
		<div
			class="flex absolute -bottom-8 left-1/2 z-30 space-x-3 -translate-x-1/2"
		>
      {
        Object.values(images).map((_, i) => (
          <button
            type="button"
            class="w-3 h-3 rounded-full bg-gray-400/60 hover:bg-gray-200/60 shadow-lg"
            aria-current="false"
            aria-label={`Slide ${i}`}
            data-carousel-slide-to="0"></button>
        ))
      }
		</div>
		<!-- Slider controls -->
		<button
			type="button"
			class="flex absolute top-0 left-0 z-30 justify-center items-center px-4 h-full cursor-pointer group focus:outline-none"
			data-carousel-prev
		>
			<span
				class="inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/60 dark:bg-gray-800/60 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
			>
				<svg
					class="w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-gray-400"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
					><path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M15 19l-7-7 7-7"></path></svg
				>
				<span class="hidden">Previous</span>
			</span>
		</button>
		<button
			type="button"
			class="flex absolute top-0 right-0 z-30 justify-center items-center px-4 h-full cursor-pointer group focus:outline-none"
			data-carousel-next
		>
			<span
				class="inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/60 dark:bg-gray-800/60 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
			>
				<svg
					class="w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-gray-400"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
					><path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M9 5l7 7-7 7"></path></svg
				>
				<span class="hidden">Next</span>
			</span>
		</button>
	</div>
</astro-carousel>

<script>
	class AstroCarousel extends HTMLElement {
		items = this.querySelectorAll('[data-carousel-item]')
    itemButtons = this.querySelectorAll('[data-carousel-slide-to]')
    active = 0
    total = this.items.length

		constructor() {
			super()
      this.items[0].classList.remove('hidden')
      this.itemButtons[0].classList.add('!bg-gray-200/60')
      this.querySelector('[data-carousel-next]')?.addEventListener('click', () => this.next())
      this.querySelector('[data-carousel-prev]')?.addEventListener('click', () => this.prev())
      this.itemButtons.forEach((b, i) => b.addEventListener('click', () => this.jumpTo(i)))

      setInterval(() => {
        this.next()
      }, 5000)
		}

    next() {
      this.items[this.active].classList.add('hidden')
      this.active = this.total === this.active + 1 ? 0 : this.active + 1
      this.items[this.active].classList.remove('hidden')
      this.jumpTo()
    }

    prev() {
      this.active = 0 === this.active ? this.total - 1 : this.active - 1
      this.jumpTo()
    }

    jumpTo(n: number = this.active) {
      this.items.forEach(i => i.classList.add('hidden'))
      this.itemButtons.forEach(i => i.classList.remove('!bg-gray-200/60'))
      this.items[n].classList.remove('hidden')
      this.itemButtons[n].classList.add('!bg-gray-200/60')
    }
  }

  customElements.define('astro-carousel', AstroCarousel)
</script>

<style>
  .fade-in {
    opacity: 0;
    animation: fadeInAnimation 2s forwards;
  }
  @keyframes fadeInAnimation {
    to { opacity: 1; }
  }
</style>
